# Cline Rules for Snowgander Project

This file captures key learnings, patterns, and preferences for the AI Vendor Abstraction Layer project.

## Core Principles & Patterns

- **Adapter + Factory:** The core architecture relies on the Adapter pattern (`AIVendorAdapter`) for vendor implementation and the Factory pattern (`AIVendorFactory`) for instantiation.
- **ContentBlocks:** Use the `ContentBlock[]` system (`types.ts`) consistently for all message content (input/output) to ensure uniformity across adapters.
- **Configuration Injection:** Vendor/model configuration (`VendorConfig`, `ModelConfig`) should be injected into the factory/adapters, not hardcoded.
- **Capability Flags:** Rely on adapter capability flags (`isVisionCapable`, `isImageGenerationCapable`, `isThinkingCapable`) to determine supported features.
- **Unified Thinking/Reasoning:** Use the `isThinkingCapable` flag (in `ModelConfig`), the `budgetTokens` parameter (in `Chat`), and the `ThinkingBlock` content type to handle both Anthropic's thinking and OpenRouter's reasoning features consistently.
- **Cost Calculation:** Utilize the `computeResponseCost` utility and `UsageResponse` for standardized cost tracking.

## Current Limitations / Areas for Attention

- **MCP Tool Handling:** The approach appears to be evolving. Initially tools were delegated entirely to the consuming application with adapters throwing errors for `sendMCPChat`. Now at least the Anthropic adapter integrates tool handling directly in `sendChat` and `generateResponse` methods, formatting MCP tools for the API. Need to verify consistency across all adapters.
- **Multimodal Input:** Handling of image inputs (`ImageDataBlock`, `ImageBlock`) varies significantly between adapters and requires careful attention.
- **OpenAI Endpoint:** The `OpenAIAdapter` uses `client.responses.create`, which is the new way to interact with OpenAI's API

## User Preferences & Workflow

- _(To be filled in as learned)_

## Tool Usage Patterns

- _(To be filled in as learned)_

## Project Evolution Notes

- **2025-04-03:** Initial Memory Bank and `.clinerules` created based on code review. Focus is on establishing baseline documentation.
- **2025-04-05:** Updated Memory Bank based on detailed review of `types.ts`, `factory.ts`, and examination of adapters. Discovered evolution in tool handling approach with the Anthropic adapter now directly supporting MCP tools in its standard methods.
- **2025-04-14:** Added OpenRouter reasoning support. Established a unified pattern using `isThinkingCapable`, `budgetTokens`, and `ThinkingBlock` for both Anthropic thinking and OpenRouter reasoning. Updated `OpenRouterAdapter` and its tests. Updated Memory Bank files (`activeContext.md`, `progress.md`, `systemPatterns.md`).
